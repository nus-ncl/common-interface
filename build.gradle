buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.6.RELEASE")
    }
}
// settings for all projects
allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    group 'sg.ncl'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
    }

    dependencyManagement {
        dependencies {
//            dependencySet(group: 'org.hibernate', version: '5.1.0.Final') {
//                entry 'hibernate-core'
//                entry 'hibernate-entitymanager'
//            }
            dependency 'org.apache.commons:commons-lang3:3.4'
            dependency 'io.jsonwebtoken:jjwt:0.6.0'
            dependency 'org.jmockit:jmockit:1.25'
        }

        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.6.RELEASE'
        }
    }

    test {
        ignoreFailures true
    }

    jacocoTestReport {
        dependsOn check
        // HACK Jacoco's requirement that every test set has to have at least one test case for generating a report;
        // workaround removes test sets that does not have any test cases
        executionData = files(executionData.findAll({ it.exists() }))
    }
}

configure(subprojects.findAll({ it.name.startsWith('service-') })) {
    apply plugin: 'spring-boot'
}

apply plugin: 'spring-boot'

def getVersion = {
    def major = '1'
    def minor = '0'
    def build = System.getenv('bamboo_build_number')
    if (build == null || build.isEmpty()) {
        build = 'SNAPSHOT'
    } else {
        build = 'b' + build
    }
    return String.format('%s.%s-%s', major, minor, build)
}

version getVersion()

dependencies {
    // the only compile dependencies needed here are the services projects;
    // there should be no other compile dependencies
    compile subprojects.findAll({ it.name.startsWith('service-') })
    // the runtime dependencies should be a union of all runtime dependencies needed by all subprojects
    runtime 'mysql:mysql-connector-java'
    runtime 'org.postgresql:postgresql'
    runtime 'com.h2database:h2'

    testCompile 'junit:junit'
}

check {
    dependsOn subprojects.check
}

task copyJunitXml(type: Copy) {
    from(subprojects.test.reports.junitXml.destination) {
        include '*.xml'
    }
    into test.reports.junitXml.destination
}

task testReport(type: TestReport) {
    dependsOn check
    reportOn allprojects.test
    destinationDir test.reports.html.destination
    finalizedBy copyJunitXml
}

jacocoTestReport {
    dependsOn allprojects.check
    executionData = fileTree(project.rootDir.absolutePath).include('**/build/jacoco/*.exec')
    sourceDirectories = files(sourceSets.main.java.srcDirs, subprojects.sourceSets.main.java.srcDirs)
    classDirectories = files(sourceSets.main.output.classesDir, subprojects.sourceSets.main.output.classesDir)
}

task wrapper(type: Wrapper) {
    gradleVersion '2.14'
    distributionUrl "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
