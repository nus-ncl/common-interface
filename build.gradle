buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'org.sonarqube' version '3.1.1'
    id 'com.jfrog.bintray' version '1.7.1'
    id 'org.tenne.rest' version '0.4.2'
}
apply plugin: 'spring-boot'

ext {
    hash = System.getenv('TRAVIS_COMMIT') == null ? 'SNAPSHOT' : "git rev-parse --short ${System.getenv('TRAVIS_COMMIT')}".execute().text.trim()
}
// settings for all projects
allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    group 'sg.ncl'

    version "1-${hash}"

//    sourceCompatibility = JavaVersion.VERSION_1_8
//    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.7.RELEASE'
            mavenBom 'org.springframework.boot:spring-boot-dependencies:1.4.0.RELEASE'
        }
        dependencies {
            dependency 'org.apache.commons:commons-lang3:3.4'
            dependency 'io.jsonwebtoken:jjwt:0.6.0'
            dependency 'org.jmockit:jmockit:1.25'
            dependency 'org.projectlombok:lombok:1.18.20'
        }
    }

    dependencies {
//        choose one of two lines below
//        compile 'javax.xml.ws:jaxws-api:2.3.0'
        implementation group: 'javax.xml.ws', name: 'jaxws-api', version: '2.3.1'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    }
    compileJava {
        dependsOn(processResources)
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }
}

dependencies {
    // the only compile dependencies needed here are the services projects;
    // there should be no other compile dependencies
    compile subprojects.findAll({ it.name.startsWith('service-') })
    // the runtime dependencies should be a union of all runtime dependencies needed by all sub-projects

    testCompile project(':common-test')
}

jacocoTestReport {
    dependsOn subprojects.jacocoTestReport
    sourceDirectories.from = files(allprojects.sourceSets.main.java.srcDirs)
    classDirectories.from = files(allprojects.sourceSets.main.output.classesDirs)
    executionData.from = files(allprojects.jacocoTestReport.executionData).filter { it.exists() }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.java.srcDirs.flatten()
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'zhangchunwang-github'
        property 'sonar.login', System.getenv('SONAR_TOKEN')
        if (System.getenv('TRAVIS_BRANCH') == 'master') {
            if (System.getenv('TRAVIS_PULL_REQUEST') == 'false') {
            } else {
                property 'sonar.github.pullRequest', System.getenv('TRAVIS_PULL_REQUEST')
                property 'sonar.github.repository', System.getenv('TRAVIS_REPO_SLUG')
                property 'sonar.github.oauth', System.getenv('GITHUB_TOKEN')
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    dryRun = System.getenv('TRAVIS_BRANCH') != 'master' || System.getenv('TRAVIS_PULL_REQUEST') != 'false'
    publish = System.getenv('TRAVIS_BRANCH') == 'master' && System.getenv('TRAVIS_PULL_REQUEST') == 'false'
    pkg {
        repo = 'generic'
        name = 'services-in-one'
        userOrg = 'ncl'
        desc = 'All NCL services running together'
        websiteUrl = 'https://github.com/nus-ncl/services-in-one'
        issueTrackerUrl = 'https://github.com/nus-ncl/services-in-one/issues'
        vcsUrl = 'https://github.com/nus-ncl/services-in-one.git'
        licenses = ['Apache-2.0']

        githubRepo = 'nus-ncl/services-in-one'

        version {
            name = "${project.version}"
            desc = "Services In One ${project.version} release"
            released = new Date()
        }
    }
}

task bamboo(type: org._10ne.gradle.rest.RestTask) {
    httpMethod = 'post'
    uri = 'https://bamboo.ncl.sg/rest/api/latest/queue/NCL-SIO'
    contentType = groovyx.net.http.ContentType.JSON
    requestHeaders = [
            Accept       : 'application/json',
            Authorization: System.getenv('BAMBOO_CREDENTIALS')
    ]
    responseHandler = {
        assert it.buildNumber != null
        println '- Response: ' + it
    }
}

task triggerBamboo {
    doLast {
        if (System.getenv('TRAVIS_BRANCH') == 'master' && System.getenv('TRAVIS_PULL_REQUEST') == 'false') {
            println 'Triggering Bamboo Build:'
//            tasks.bamboo.execute()
            tasks.bamboo.finalizedBy()
        } else {
            println 'Is not on master branch or is a pull request: branch = ' + System.getenv('TRAVIS_BRANCH') + ', pull request = ' + System.getenv('TRAVIS_PULL_REQUEST')
        }
    }
}

task printInfo {
    doLast{
        println "  - project: ${project.name}"
        println "  - archive artifacts: ${project.configurations.archives.allArtifacts.size()}"
        project.configurations.archives.artifacts.files.each {
            println "    - ${it.name}"
        }
        println "  - group: ${project.group}"
        println "  - version: ${project.version}"
        println "  - ${subprojects.size()} subprojects:"
        subprojects.each {
            println "    - ${it.name}:"
            println "      - archive artifacts: ${it.configurations.archives.allArtifacts.size()}"
            it.configurations.archives.artifacts.files.each {
                println "        - ${it.name}"
            }
            println "      - group: ${it.group}"
            println "      - version: ${it.version}"
        }
    }
}

wrapper{
    gradleVersion '6.8.3'
    distributionUrl "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

springBoot {
    mainClass = 'sg.ncl.service.ServicesInOneApplication'
}

def appMainClass = 'ServicesInOneApplication'
jar {
    from {
        configurations.runtime.collect{zipTree(it)}
    }
    manifest {
        attributes 'Main-Class': appMainClass
    }
}

bootRepackage {
    mainClass = appMainClass
}