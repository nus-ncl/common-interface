buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'

    group = 'sg.ncl'
    version = '1.0-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
    }

    dependencyManagement {
        dependencies {
//            dependencySet(group: 'org.hibernate', version: '5.1.0.Final') {
//                entry 'hibernate-core'
//                entry 'hibernate-entitymanager'
//            }
            dependency 'io.jsonwebtoken:jjwt:0.6.0'
        }

        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.5.RELEASE'
        }
    }

}

configure([project(':service-authentication'),
           project(':service-experiment'),
           project(':service-realization'),
           project(':service-registration'),
           project(':service-team'),
           project(':service-user'),
           project(':service-version')]) {
    apply plugin: 'spring-boot'

    sourceSets {
        integrationTest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            java { srcDir('src/test-integration/java') }

            resources { srcDir('src/test-integration/resources') }
        }
    }

    configurations {
        integrationTestCompile { extendsFrom testCompile }
        integrationTestRuntime { extendsFrom testRuntime }
    }

    idea {
        module {
            testSourceDirs += sourceSets.integrationTest.java.srcDirs
            testSourceDirs += sourceSets.integrationTest.resources.srcDirs
        }
    }
    task integrationTest(type: Test) {
        check {
            dependsOn integrationTest
        }
        integrationTest {
            mustRunAfter test
        }
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    tasks.withType(Test) {
        reports {
            html {
                destination = file("${reporting.baseDir}/${name}")
            }
        }
    }
}

apply plugin: 'spring-boot'

dependencies {
    compile project(':service-authentication')
    compile project(':service-experiment')
    compile project(':service-realization')
    compile project(':service-registration')
    compile project(':service-team')
    compile project(':service-user')
    compile project(':service-version')

    runtime('mysql:mysql-connector-java')
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/html")
    reportOn subprojects*.test
    reportOn subprojects.findAll({ it.name.startsWith("service-") }).integrationTest
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
