buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'io.spring.dependency-management' version '0.6.0.RELEASE'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'org.sonarqube' version '3.1.1'
    id 'com.jfrog.bintray' version '1.7.1'
    id 'org.tenne.rest' version '0.4.2'
    id 'org.springframework.boot' version '2.5.2'
}

ext {
    commit_id =  "git rev-parse --short HEAD".execute().text.substring(0,7)
}

version = "${commit_id}"

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}

// publish to Github package repository
publishing {
    publications {
        gpr(MavenPublication) {
            groupId = 'sg.ncl'
            artifactId = 'services-in-one'
            version = "${commit_id}"
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/nus-ncl/services-in-one"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

repositories {
    mavenCentral()
}

// settings for all projects
allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    version = "${commit_id}"


    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.7.RELEASE'
            mavenBom 'org.springframework.boot:spring-boot-dependencies:1.4.0.RELEASE'
        }
        dependencies {
            dependency 'org.apache.commons:commons-lang3:3.4'
            dependency 'io.jsonwebtoken:jjwt:0.6.0'
            dependency 'org.jmockit:jmockit:1.25'
            dependency 'org.projectlombok:lombok:1.18.20'
        }
    }

    dependencies {
//        choose one of two lines below
//        compile 'javax.xml.ws:jaxws-api:2.3.0'
        implementation group: 'javax.xml.ws', name: 'jaxws-api', version: '2.3.1'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    }
    compileJava {
        dependsOn(processResources)
    }
}

dependencies {
    // the only compile dependencies needed here are the services projects;
    // there should be no other compile dependencies
    implementation subprojects.findAll({ it.name.startsWith('service-') })
    // the runtime dependencies should be a union of all runtime dependencies needed by all sub-projects

    testImplementation project(':common-test')
}

compileJava {
    dependsOn processResources
}

tasks.jacocoTestReport {
    reports {
        xml.enabled true
    }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.java.srcDirs.flatten()
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'nus-ncl-github'
        property "sonar.projectKey", "nus-ncl_services-in-one"
        property 'sonar.login', System.getenv('SONAR_TOKEN')
        property 'sonar.github.oauth', System.getenv('GITHUB_TOKEN')
    }
}

task bamboo(type: org._10ne.gradle.rest.RestTask) {
    httpMethod = 'post'
    uri = 'https://bamboo.ncl.sg/rest/api/latest/queue/NCL-SIO'
    contentType = groovyx.net.http.ContentType.JSON
    requestHeaders = [
            Accept       : 'application/json',
            Authorization: System.getenv('BAMBOO_CREDENTIALS')
    ]
    responseHandler = {
        assert it.buildNumber != null
        println '- Response: ' + it
    }
}

task triggerBamboo {
    doLast {
        if (System.getenv('GITHUB_REF') == 'refs/heads/master' && System.getenv('GITHUB_ACTIONS') == 'true') {
            println 'Triggering Bamboo Build:'
            tasks.bamboo.finalizedBy()
        } else {
            println 'Failed Triggering Bamboo Build: Not master branch or Not running in github actions'
        }
    }
}

task printInfo {
    doLast{
        println "  - project: ${project.name}"
        println "  - archive artifacts: ${project.configurations.archives.allArtifacts.size()}"
        project.configurations.archives.artifacts.files.each {
            println "    - ${it.name}"
        }
        println "  - group: ${project.group}"
        println "  - version: ${project.version}"
        println "  - ${subprojects.size()} subprojects:"
        subprojects.each {
            println "    - ${it.name}:"
            println "      - archive artifacts: ${it.configurations.archives.allArtifacts.size()}"
            it.configurations.archives.artifacts.files.each {
                println "        - ${it.name}"
            }
            println "      - group: ${it.group}"
            println "      - version: ${it.version}"
        }
    }
}

wrapper{
    gradleVersion '6.8.3'
    distributionUrl "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

springBoot {
    mainClass = 'sg.ncl.service.ServicesInOneApplication'
}

def appMainClass = 'ServicesInOneApplication'

jar {
    enabled = false

    from {
        configurations.runtime.collect{zipTree(it)}
    }
    manifest {
        attributes 'Main-Class': appMainClass
    }
}

//bootRepackage {
//    mainClass = appMainClass
//}

bootJar {
    mainClass = 'sg.ncl.service.ServicesInOneApplication'
}

