buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'org.sonarqube' version '2.0.1'
    id 'com.jfrog.bintray' version '1.7.1'
}
apply plugin: 'spring-boot'

// settings for all projects
allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    group 'sg.ncl'

    version "1.0-${System.getenv('TRAVIS_BUILD_NUMBER') == null ? 'SNAPSHOT' : 'b' + System.getenv('TRAVIS_BUILD_NUMBER')}"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.7.RELEASE'
            mavenBom 'org.springframework.boot:spring-boot-dependencies:1.4.0.RELEASE'
        }
        dependencies {
            dependency 'org.apache.commons:commons-lang3:3.4'
            dependency 'io.jsonwebtoken:jjwt:0.6.0'
            dependency 'org.jmockit:jmockit:1.25'
            dependency 'org.projectlombok:lombok:1.16.10'
        }
    }

    compileJava {
        dependsOn(processResources)
    }

    jacocoTestReport {
        reports {
            xml {
                enabled true
            }
        }
    }
}

dependencies {
    // the only compile dependencies needed here are the services projects;
    // there should be no other compile dependencies
    compile subprojects.findAll({ it.name.startsWith('service-') })
    // the runtime dependencies should be a union of all runtime dependencies needed by all sub-projects

    testCompile project(':common-test')
}

jacocoTestReport {
    dependsOn subprojects.jacocoTestReport
    sourceDirectories = files(allprojects.sourceSets.main.java.srcDirs)
    classDirectories = files(allprojects.sourceSets.main.output.classesDir)
    executionData = files(allprojects.jacocoTestReport.executionData).filter { it.exists() }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.java.srcDirs.flatten()
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarqube.com'
        property 'sonar.projectKey', 'nus-ncl:services-in-one'
        property 'sonar.projectName', 'NCLServices'
        property 'sonar.projectVersion', "${project.version}"
        property 'sonar.login', System.getenv('SONAR_TOKEN')
        if (System.getenv('TRAVIS_BRANCH') == 'master') {
            if (System.getenv('TRAVIS_PULL_REQUEST') == 'false') {
            } else {
                property 'sonar.analysis.mode', 'preview'
                property 'sonar.github.pullRequest', System.getenv('TRAVIS_PULL_REQUEST')
                property 'sonar.github.repository', System.getenv('TRAVIS_REPO_SLUG')
                property 'sonar.github.oauth', System.getenv('GITHUB_TOKEN')
            }
        } else {
            property 'sonar.analysis.mode', 'issues'
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = 'generic'
        name = 'services-in-one'
        userOrg = 'nus-ncl'
        desc = 'All NCL services running together'
        vcsUrl = 'https://github.com/nus-ncl/services-in-one.git'
        licenses = ['Apache-2.0']
    }
}

task printInfo << {
    println "  - project: ${project.name}"
    println "  - archive artifacts: ${project.configurations.archives.allArtifacts.size()}"
    project.configurations.archives.artifacts.files.each {
        println "    - ${it.name}"
    }
    println "  - group: ${project.group}"
    println "  - version: ${project.version}"
    println "  - ${subprojects.size()} subprojects:"
    subprojects.each {
        println "    - ${it.name}:"
        println "      - archive artifacts: ${it.configurations.archives.allArtifacts.size()}"
        it.configurations.archives.artifacts.files.each {
            println "        - ${it.name}"
        }
        println "      - group: ${it.group}"
        println "      - version: ${it.version}"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion '2.14.1'
    distributionUrl "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
